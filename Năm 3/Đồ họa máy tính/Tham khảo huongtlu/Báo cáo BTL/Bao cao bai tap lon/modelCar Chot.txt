
#include "stdafx.h"


#include <GL/glut.h>
static int dichchuyen = 0;
float spin = 0.0f;
GLfloat tinhtienz = 0.5f;
//Hàm Xử lý tốc độ quay của bánh xe.
void spinDisplay(void) {
	spin = spin + 1;
	if (spin > 360.0)
		spin = spin - 360.0;
	glutPostRedisplay(); 
}
//Hàm khai bao thao tac xử lý chiếu sáng: ánh sáng bao quanh, ánh sáng khuếch tán, ánh sáng phản chiếu Red, Green, Blue.
void setMaterial(GLfloat ambientR, GLfloat ambientG, GLfloat ambientB,
	GLfloat diffuseR, GLfloat diffuseG, GLfloat diffuseB,
	GLfloat specularR, GLfloat specularG, GLfloat specularB,
	GLfloat shininess)
{
	GLfloat ambient[] = { ambientR, ambientG, ambientB }; //Ánh sáng môi trường
	GLfloat diffuse[] = { diffuseR, diffuseG, diffuseB }; //Ánh sáng khuếch tán
	GLfloat specular[] = { specularR, specularG, specularB }; //Ánh sáng phản chiếu.
	glMaterialfv(GL_FRONT, GL_AMBIENT, ambient);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, diffuse);
	glMaterialfv(GL_FRONT, GL_SPECULAR, specular);
	glMaterialf(GL_FRONT, GL_SHININESS, shininess);

}
void display(void)
{
	// clear window
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );

	glMatrixMode(GL_MODELVIEW);
	//Thao tác điều khiển ngăn xếp ma trận vẽ thanh nghiên giống đường đi
	glColor3f(1.0, 1.0, 0.0);
	setMaterial(0.0, 1.0, .0, 1.0, 1.0, 1.0, 1.0, 1.0, .0, 50); //Chỉnh sửa thông số màu ở đây để tạo màu nó phù hợp, dựa vào hàm setMaterial ở trên?
	glPushMatrix();
	glRotatef(50, 0, 1, 1);  //Ðộ nghiêng.
	glScalef(20, 0, 3.0);   
	glutWireCube(1.0);
	glPopMatrix();

	//Phép tịnh tiến sự kiện họa cảnh

	//Thao tác ma trận vẽ ô tô biến đổi điểm nhìn và biến đổi mô hình.
	glPushMatrix();
	glTranslatef((GLfloat)dichchuyen / 10, (GLfloat)dichchuyen / 10, 0);

	glPushMatrix();
	setMaterial(0.0, 0.0, 0.0,  1.0, 1.0, 1.0,  1.0, 1.0, .0, 50); //Chỉnh sửa thông số màu ở đây để tạo màu nó phù hợp, dựa vào hàm setMaterial ở trên?
	//Vẽ ngăn xếp trên thân trên hình
	glScalef(1, .5, 2);
	glutSolidCube(.5);
	glPopMatrix();

	//Vẽ ngăn xếp thân trên hình.
	glPushMatrix();
	setMaterial(0.0, 0.0, 0.0, 0.0, 1.0, 0.0,  1.0, 1.0, 1.0, 50); //Chỉnh sửa thông số màu ở đây để tạo màu nó phù hợp, dựa vào hàm setMaterial ở trên?
	glTranslatef(0.55, 0.75, tinhtienz);
	glScalef(1.0, 0.5, 1.5);
	glutSolidCube(.35);
	glPopMatrix();

	glTranslatef(0.0, 0, 0.25);

	glPushMatrix();
	
	// Thao tác ma trận thao tác vẽ bánh xe và chuyển động.
	setMaterial(1.0, 1.0, 1.0, .0, .0, .0, 1.0, 1.0, 1.0, 50); //Chỉnh sửa thông số màu ở đây để tạo màu nó phù hợp, dựa vào hàm setMaterial ở trên?

	glRotatef(90, 0.0, 1.0, .0);
	glTranslatef(.1, -.4, 0);
	glRotatef(spin, 0.0, 0.0, 1.0);//Chinh thong so quay o day
	glutSolidTorus(.05, .1, 9, 9);       // wheel

	glRotatef(90, 0.0, 0.0, 1.0);
	glTranslatef(0.0, 0.0, -0.3);
	glRotatef(spin, 0.0, 0.0, 1.0); //Chinh thong so quay o day
	glTranslatef(0.0, 0.0, -0.1);
	glutSolidTorus(.05, .1, 9, 9);       // wheel
	glPopMatrix();

	glTranslatef(0, 0, -.6);

	glPushMatrix();
	setMaterial(1.0, 1.0, 1.0, 0.0, .0, .0,  1.0, 1.0, 1.0, 50); //Chỉnh sửa thông số màu ở đây để tạo màu nó phù hợp, dựa vào hàm setMaterial ở trên?
	glRotatef(90, 0.0, 1.0, .0);
	glTranslatef(.2, -.45, 0);
	glRotatef(spin, 0.0, 0.0, 1.0);//Chinh thong so quay o day
	glutSolidTorus(.05, .1, 9, 9);       // wheel

	glRotatef(90, 0.0, 0.0, 1.0);
	glTranslatef(0.0, 0.007, -.2);
	glRotatef(spin, 0.0, 0.0, 1.0); //Chinh thong so quay o day
	glutSolidTorus(.05, .1, 9, 9);       // wheel
	glPopMatrix();
	glPopMatrix();
	glFlush();
	glutSwapBuffers();

}
// Hàm xử lý khởi
void reshape(int width, int height)
{
	glViewport(0, 0, width, height);
}

//Hàm sử lý sự kiện hoạt cảnh bàn phím
void keyboard(unsigned char key, int x, int y)
{
	switch (key) {
	case 'm':
		dichchuyen = (dichchuyen + 1) / 1.1;
		glutPostRedisplay();
		break;
	case 'n':
		dichchuyen = (dichchuyen - 1)*1.1;
		glutPostRedisplay();
		break;
	default:
		break;
	}
}
//Hàm xử lý sự kiện thao tác với chuột
void MouseButton(int type_button, int state, GLint x, GLint y)
{
	switch (type_button)
	{
	case GLUT_LEFT_BUTTON:
		if (state == GLUT_DOWN)
			glutIdleFunc(spinDisplay);
		break;
	default:
		break;
	}
}
void MouseMove(int x, int y) {
	int a = 5;
}
void init(void)
{
	glClearColor(0.0, 0.0, 1.0, 1.0);
	glShadeModel(GL_FLAT);
}
int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	init();
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(0, 0);
	glutInitDisplayMode(GLUT_RGB | GLUT_DEPTH);

	glutCreateWindow("Hello, Car Model!");
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutMouseFunc(MouseButton);
	
	/* set up depth-buffering */
	glEnable(GL_DEPTH_TEST);

	/* turn on default lighting */
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glEnable(GL_LIGHT1);
	glEnable(GL_LIGHT2);

	/* define the projection transformation */
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(40, 1, 4, 20);

	/* define the viewing transformation */
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(5.0, 5.0, 5.0, .0, .0, .0, 0.0, 3.0, .0);

	glutKeyboardFunc(keyboard);

	glutMainLoop();
}







